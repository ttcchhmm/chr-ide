name: Docker Image CI

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            platform: linux/amd64
          - os: ubuntu-24.04-arm
            arch: arm64
            platform: linux/arm64

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # - name: Build and push Docker image
    #   id: push
    #   uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
    #   with:
    #     context: .
    #     push: true
    #     tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    #     cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
    #     cache-to: type=inline

    - name: Build and Push Platform Image
      run: |
        docker buildx create --use
        docker buildx build \
          --platform ${{ matrix.platform }} \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-${{ matrix.arch }} \
          --push \
          .
  
  merge:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Inspect and Fetch Image Digests
        run: |
          AMD64_DIGEST=$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-amd64 --format '{{json .}}' | jq -r '.manifest.manifests[0].digest')
          ARM64_DIGEST=$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-arm64 --format '{{json .}}' | jq -r '.manifest.manifests[0].digest')
          echo "AMD64_DIGEST=${AMD64_DIGEST}" >> $GITHUB_ENV
          echo "ARM64_DIGEST=${ARM64_DIGEST}" >> $GITHUB_ENV

      - name: Create and Push Multi-Arch Manifest
        run: |
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ env.AMD64_DIGEST }} \
            --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ env.ARM64_DIGEST }}
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest